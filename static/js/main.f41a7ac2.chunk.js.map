{"version":3,"sources":["components/Cell/index.js","components/Battlefield/index.js","components/ConfigBattlefield/index.js","components/ShipSelector/index.js","components/NameField/index.js","api/axios.js","api/index.js","redux/actions/gameConfig.js","socket.js","containers/ConfigBattlefield.jsx","containers/ShipSelector.jsx","containers/ReadyButton.jsx","containers/UserBattlefield.jsx","containers/EnemyBattlefield.jsx","containers/BattlefieldMiddleZone.jsx","pages/GamePlatform/index.js","pages/HomePage/index.js","pages/BattleFieldPlatform/index.js","pages/JoinPage/index.js","App.js","redux/reducers/battlefield.js","reportWebVitals.js","redux/reducers/gameConfig.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["Cell","y","x","isShip","isSelected","isWounded","isKilled","isShootSelected","isMissed","size","className","classNames","data-x","data-y","style","Battlefield","cells","onMouseOverHandler","onCellClick","onContextMenu","cellSize","Math","round","onMouseOut","onMouseOver","onClick","maxWidth","minWidth","map","cell","shipId","isAroundZone","_id","ConfigBattlefield","items","currentShipSize","addShip","canAddShip","useState","setSells","isRow","setIsRow","useEffect","getShip","ship","i","filter","item","length","push","showShip","show","newCells","forEach","indexOf","e","target","classList","contains","dataset","shipAroundZone","setAround","shipCell","getShipAround","uuidv4","type","preventDefault","Selector","count","isActive","isEnabled","onSelectSelected","ShipSelector","selectrors","currentSelector","visible","NameField","joinToken","enterClick","nickName","setNickName","linkText","window","location","hostname","textField","document","createElement","innerText","body","appendChild","select","execCommand","remove","notification","open","message","description","icon","SmileOutlined","color","LinkOutlined","readOnly","value","onChange","axios","defaults","baseURL","console","log","process","REACT_APP_SERVER","interceptors","request","use","config","gameId","localStorage","getItem","userId","headers","error","Promise","reject","api","createGame","postData","post","index","get","join","enemyCells","setCells","shoot","actions","set–°urrentSize","id","payload","readyCheck","setShip","dispatch","setGameData","data","setGameStatus","status","fetchGameInfo","then","fetchCreateGame","setItem","userA","fetchJoinGame","game","user","fetchGetCells","fetchGetEnemyCells","setEnemyCells","fetchSetCells","setUserReady","fetchShoot","isReady","setWoundedCell","setMissedCell","setKilledCells","setMyWoundedCell","setMyMissedCell","setMyKilledCells","setCanShoot","isCanShoot","socket","io","connect","gameConfigs","gameConfigActions","userReady","on","antIcon","SmileTwoTone","fontSize","spin","readyToBattle","setIsReady","indicator","canShoot","cellId","shootData","JSON","parse","shootUser","Step","Steps","GamePlatform","direction","current","title","gameObj","BattleFieldPlatform","j","history","pathname","split","userB","statusSwitch","props","gameStatus","MainRouteComponent","emit","path","component","JoinPage","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","readyUsers","sortFunction","a","b","aSize","bSize","aLow","bLow","combineReducers","battlefield","state","currentRoundUser","oldCells","some","killedCell","concat","sort","oldMyCells","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middleware","thunk","store","createStore","rootReducer","applyMiddleware","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f41a7ac2.chunk.js","sourcesContent":["import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\nimport './Cell.scss';\r\n\r\nconst Cell = ({\r\n                  y, x, isShip, isSelected,\r\n                  isWounded, isKilled, isShootSelected,\r\n                  isMissed, size = 60\r\n              }) => {\r\n    return (\r\n        <div\r\n            className={\r\n                classNames('cell',\r\n                    {'ship': isShip || isSelected},\r\n                    {'ship__shoot-selected': isShootSelected},\r\n                    {'ship__shoot-wounded': isWounded && !isKilled},\r\n                    {'ship__shoot-missed': isMissed},\r\n                    {'ship__shoot-killed': isKilled},)\r\n            }\r\n            data-x={x} data-y={y} style={{'width': size, 'height': size}}/>\r\n    );\r\n};\r\n\r\nexport default Cell;\r\n","import React from 'react';\r\nimport './Battlefield.scss';\r\nimport Cell from \"../Cell\";\r\n\r\nconst Battlefield = ({cells, onMouseOverHandler, onCellClick, onContextMenu, size = 640}) => {\r\n    const cellSize = Math.round((size - (size / 100 * 6.25)) / 10);\r\n    return (\r\n        <div className='battlefield-wrap' onMouseOut={onMouseOverHandler} onMouseOver={onMouseOverHandler}\r\n             onContextMenu={onContextMenu} onClick={onCellClick} style={{maxWidth: size, minWidth: size}}>\r\n            <div className='battlefield'>\r\n                {cells && cells.map(cell => <Cell key={cell._id}\r\n                                                  x={cell.x}\r\n                                                  y={cell.y}\r\n                                                  isShip={cell.isShip}\r\n                                                  shipId={cell.shipId}\r\n                                                  isSelected={cell.isSelected}\r\n                                                  isAroundZone={cell.isAroundZone}\r\n                                                  size={cellSize}\r\n                                                  isKilled={cell.isKilled}\r\n                                                  isWounded={cell.isWounded}\r\n                                                  isShootSelected={cell.isShootSelected}\r\n                                                  isMissed={cell.isMissed}\r\n                    />\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\nexport default Battlefield;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Battlefield from \"../Battlefield\";\r\nimport {v4 as uuidv4 } from 'uuid';\r\n\r\nconst ConfigBattlefield = ({ items, currentShipSize, addShip, canAddShip }) => {\r\n    const [cells, setSells] = useState('');\r\n    const [isRow, setIsRow] = useState(false);\r\n    useEffect(() => {\r\n        setSells(items);\r\n    }, [items]);\r\n    const getShip = (x, y) => {\r\n        let ship = [];\r\n        for (let i = 0; i < currentShipSize; i++) {\r\n            let cell = cells.filter((item) => {\r\n                if (isRow) {\r\n                    return item.y === +y && item.x === +x + i && !item.isShip && !item.isAroundZone;\r\n                } else {\r\n                    return item.y === +y + i && item.x === +x && !item.isShip && !item.isAroundZone;\r\n                }\r\n            });\r\n            if (cell.length) {\r\n                ship.push(cell[0]);\r\n            }\r\n        }\r\n        return ship;\r\n    }\r\n\r\n    const getShipAround = (ship) => {\r\n        const shipAroundZone = [];\r\n        function setAround(cell) {\r\n            if (cell.length) {\r\n                shipAroundZone.push(cell[0]);\r\n            }\r\n        }\r\n        ship.forEach(shipCell => {\r\n            setAround(cells.filter((item) => {\r\n                return item.x === shipCell.x - 1 && item.y === shipCell.y && !item.isAroundZone && !item.isSelected;\r\n            }));\r\n            setAround(cells.filter((item) => {\r\n                return item.x === shipCell.x + 1 && item.y === shipCell.y && !item.isAroundZone && !item.isSelected;\r\n            }));\r\n            setAround(cells.filter((item) => {\r\n                return item.x === shipCell.x && item.y === shipCell.y - 1 && !item.isAroundZone && !item.isSelected;\r\n            }));\r\n            setAround(cells.filter((item) => {\r\n                return item.x === shipCell.x && item.y === shipCell.y + 1 && !item.isAroundZone && !item.isSelected;\r\n            }));\r\n\r\n            setAround(cells.filter((item) => {\r\n                return item.x === shipCell.x - 1 && item.y === shipCell.y - 1 && !item.isAroundZone && !item.isSelected;\r\n            }));\r\n            setAround(cells.filter((item) => {\r\n                return item.x === shipCell.x + 1 && item.y === shipCell.y + 1 && !item.isAroundZone && !item.isSelected;\r\n            }));\r\n            setAround(cells.filter((item) => {\r\n                return item.x === shipCell.x + 1 && item.y === shipCell.y - 1 && !item.isAroundZone && !item.isSelected;\r\n            }));\r\n            setAround(cells.filter((item) => {\r\n                return item.x === shipCell.x - 1 && item.y === shipCell.y + 1 && !item.isAroundZone && !item.isSelected;\r\n            }));\r\n\r\n        });\r\n        return shipAroundZone;\r\n    }\r\n\r\n    const onContextMenu = (e) => {\r\n        e.preventDefault();\r\n        if (e.target.classList.contains(\"cell\")) {\r\n            let x = e.target.dataset.x;\r\n            let y = e.target.dataset.y;\r\n            showShip(x, y, false);\r\n            setIsRow(!isRow);\r\n        }\r\n    }\r\n\r\n    const showShip = (x, y, show) => {\r\n        let ship = getShip(x, y);\r\n        let newCells = [...cells];\r\n\r\n        if (ship.length === currentShipSize) {\r\n            ship.forEach((item) => {\r\n                newCells[newCells.indexOf(item)].isSelected = show;\r\n            });\r\n        }\r\n        setSells(newCells);\r\n    }\r\n\r\n    const onMouseOverHandler = (e) => {\r\n        if (e.target.classList.contains(\"cell\") && canAddShip) {\r\n            let x = e.target.dataset.x;\r\n            let y = e.target.dataset.y;\r\n            if (e.type === 'mouseover') {\r\n                showShip(x, y, true);\r\n            }\r\n\r\n            if (e.type === 'mouseout') {\r\n                showShip(x, y, false);\r\n            }\r\n        }\r\n    }\r\n\r\n    const onCellClick = (e) => {\r\n        if (e.target.classList.contains(\"cell\") && canAddShip) {\r\n            const x = e.target.dataset.x;\r\n            const y = e.target.dataset.y;\r\n            const ship = getShip(x, y);\r\n            const newCells = [...cells];\r\n            if (ship.length === currentShipSize) {\r\n                const aroundZode = getShipAround(ship);\r\n                aroundZode.forEach(item => {\r\n                    newCells[newCells.indexOf(item)].isAroundZone = true;\r\n                });\r\n                const shipId = uuidv4();\r\n                ship.forEach((item) => {\r\n                    newCells[newCells.indexOf(item)].isShip = true;\r\n                    newCells[newCells.indexOf(item)].shipId = shipId;\r\n                });\r\n                addShip();\r\n            }\r\n            setSells(newCells);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Battlefield cells={cells} onCellClick={onCellClick} onMouseOverHandler={onMouseOverHandler} onContextMenu={onContextMenu} size={640} />\r\n    )\r\n};\r\nexport default ConfigBattlefield;\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport './ShipSelector.scss';\r\n\r\nconst Selector = ({size, count, isActive, isEnabled, onSelectSelected}) => {\r\n    let items = [];\r\n    for (let i = 0; i < size; i++) {\r\n        items.push(\r\n            <div key={i}\r\n                 className={classNames('ship-selector-cell',\r\n                     {'ship-selector-cell-active': isActive && isEnabled},\r\n                     {'ship-selector-cell-unenable': !isEnabled})}/>\r\n        );\r\n    }\r\n    return (\r\n        <div className=\"ship-selector-wrap\" onClick={() => onSelectSelected(size)}>\r\n            <div className=\"ship-selector-ship\">\r\n                {items}\r\n            </div>\r\n            <h2>{count}</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ShipSelector = ({selectrors, currentSelector, onSelectSelected, visible}) => {\r\n    if (visible)\r\n        return (\r\n            <div className=\"ship-selector\">\r\n                <div>\r\n                    {selectrors.map(item => <Selector\r\n                        size={item.size}\r\n                        onSelectSelected={onSelectSelected}\r\n                        key={item.size}\r\n                        count={item.count}\r\n                        isEnabled={item.count > 0}\r\n                        isActive={currentSelector === item.size}/>)}\r\n                </div>\r\n            </div>\r\n        );\r\n    else\r\n        return (\r\n            <div/>\r\n        )\r\n        };\r\n\r\nexport default ShipSelector;\r\n","import React, {useState} from 'react';\r\n\r\nimport './NameField.scss';\r\nimport {notification} from \"antd\";\r\nimport {LinkOutlined, SmileOutlined} from \"@ant-design/icons\";\r\n\r\nconst NameField = ({joinToken, enterClick, nickName, setNickName}) => {\r\n    const linkText = `http://${window.location.hostname}:3000/join/${joinToken}`;\r\n\r\n    const copyLink = () => {\r\n        const textField = document.createElement('textarea')\r\n        textField.innerText = linkText;\r\n        document.body.appendChild(textField);\r\n        textField.select();\r\n        document.execCommand('copy');\r\n        textField.remove();\r\n        notification.open({\r\n            message: 'Link copied to clipboard',\r\n            description:\r\n                'Send link to your friend to start the game! Good luck =)',\r\n            icon: <SmileOutlined style={{color: '#108ee9'}}/>,\r\n        });\r\n    }\r\n    return (\r\n        <div className=\"home\">\r\n            <div className=\"home-wrap\">\r\n                <div className=\"home-wrap-left\">\r\n                    <h1>SEA battle</h1>\r\n                </div>\r\n                <div className=\"home-wrap-right\">\r\n                    {!joinToken ?\r\n                        (<>\r\n                            <div className=\"home-wrap-right-nameform\">\r\n                                <h1>Enter your name</h1>\r\n                                <input className='name-input' value={nickName}\r\n                                       onChange={e => setNickName(e.target.value)}/>\r\n                            </div>\r\n                            <h2 onClick={enterClick}>GO</h2>\r\n                        </>) :\r\n                        (<>\r\n                            <div className=\"home-wrap-right-link\" onClick={copyLink}>\r\n                                <div className=\"link-container\">\r\n                                    <LinkOutlined className=\"link-icon\"/>\r\n                                    <input readOnly className=\"link-container-text\" value={linkText}/>\r\n                                </div>\r\n                                <h5>join link</h5>\r\n                            </div>\r\n                        </>)\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NameField;\r\n","import axios from 'axios';\r\n\r\naxios.defaults.baseURL = \"http://\" + window.location.hostname + \":9009\";\r\n//axios.defaults.baseURL = \"http://41d7dd1f5a96.ngrok.io\";\r\nconsole.log(process.env.REACT_APP_SERVER);\r\naxios.interceptors.request.use(\r\n    config => {\r\n        const gameId = localStorage.getItem(\"gameId\");\r\n        const userId = localStorage.getItem(\"userId\");\r\n        if (gameId) {\r\n            config.headers[\"gameid\"] = gameId;\r\n            config.headers[\"userid\"] = userId;\r\n        }\r\n        return config\r\n    },\r\n    error => {\r\n        return Promise.reject(error)\r\n    });\r\n//axios.defaults.headers.common[\"gameid\"] = window.localStorage.gameid;\r\nexport default axios;","import axios from './axios';\r\n\r\nconst api =  {\r\n    createGame: postData => axios.post(\"/create\", postData),\r\n    index: () => axios.get(\"/index\"),\r\n    join: postData => axios.post(\"/join\", postData),\r\n    cells: () => axios.get(\"/cell\"),\r\n    enemyCells: () => axios.get(\"/cell/enemy\"),\r\n    setCells: postData => axios.post(\"/cell\", postData),\r\n    shoot: postData => axios.post(\"/cell/shoot\", postData),\r\n};\r\n\r\nexport  default api;","import api from '../../api'\r\n\r\nconst actions = {\r\n    set–°urrentSize: id => ({\r\n        type: 'GAMECONFIG:SET_CURRENT_SIZE',\r\n        payload: id\r\n    }),\r\n\r\n    addShip: () => ({\r\n        type: 'GAMECONFIG:SET_SHIP'\r\n    }),\r\n\r\n    readyCheck: () => ({\r\n        type: 'GAMECONFIG:READY_CHECK'\r\n    }),\r\n\r\n    setShip: () => dispatch => {\r\n        dispatch(actions.addShip());\r\n        dispatch(actions.readyCheck());\r\n    },\r\n\r\n    setGameData: data => ({\r\n        type: \"GAMECONFIG:SET_GAME_DATA\",\r\n        payload: data\r\n    }),\r\n\r\n    setGameStatus: status => ({\r\n        type: \"GAMECONFIG:SET_GAME_STATUS\",\r\n        payload: status\r\n    }),\r\n\r\n    fetchGameInfo: () => dispatch => {\r\n        return api.index().then(({data}) => {\r\n            dispatch(actions.setGameData(data));\r\n        })\r\n    },\r\n\r\n    fetchCreateGame: postData => dispatch => {\r\n        return api.createGame(postData)\r\n            .then(({data}) => {\r\n                window.localStorage.setItem(\"gameId\", data?._id)\r\n                window.localStorage.setItem(\"userId\", data?.userA);\r\n                dispatch(actions.setGameData(data));\r\n                return data;\r\n            });\r\n    },\r\n\r\n    fetchJoinGame: postData => dispatch => {\r\n        return api.join(postData)\r\n            .then(({data}) => {\r\n                if (data?.status === \"success\") {\r\n                    window.localStorage.setItem(\"gameId\", data?.game._id)\r\n                    window.localStorage.setItem(\"userId\", data?.user);\r\n                }\r\n                return data;\r\n            });\r\n    },\r\n\r\n    fetchGetCells: () => dispatch => {\r\n        return api.cells().then(({data}) => {\r\n            if (data && data.cells)\r\n                dispatch(actions.setCells(data.cells));\r\n        })\r\n    },\r\n    fetchGetEnemyCells: () => dispatch => {\r\n        return api.enemyCells().then(({data}) => {\r\n            if (data && data.cells)\r\n                dispatch(actions.setEnemyCells(data.cells));\r\n        })\r\n    },\r\n\r\n    fetchSetCells: postData => dispatch => {\r\n        return api.setCells(postData).then(({data}) => {\r\n            if (data.status === \"success\") {\r\n                dispatch(actions.setUserReady(true));\r\n            }\r\n            return data;\r\n        })\r\n    },\r\n\r\n    fetchShoot: postData => dispatch => {\r\n        return api.shoot(postData).then(({data}) => {\r\n            if (data.status === \"success\") {\r\n                dispatch(actions.setUserReady(true));\r\n            }\r\n            return data;\r\n        })\r\n    },\r\n\r\n    setCells: cells => ({\r\n        type: \"GAMECONFIG:SET_CELLS\",\r\n        payload: cells\r\n    }),\r\n\r\n    setEnemyCells: cells => ({\r\n        type: \"GAMECONFIG:SET_ENEMY_CELLS\",\r\n        payload: cells\r\n    }),\r\n\r\n    setUserReady: isReady => ({\r\n        type: \"GAMECONFIG:SET_USER_READY\",\r\n        payload: isReady\r\n    }),\r\n\r\n    setWoundedCell: cell => ({\r\n        type: \"GAMECONFIG:SET_WOUNDED_CELL\",\r\n        payload: cell\r\n    }),\r\n\r\n    setMissedCell: cell => ({\r\n        type: \"GAMECONFIG:SET_MISSED_CELL\",\r\n        payload: cell\r\n    }),\r\n\r\n    setKilledCells: cells => ({\r\n        type: \"GAMECONFIG:SET_KILL_CELL\",\r\n        payload: cells\r\n    }),\r\n\r\n    setMyWoundedCell: cell => ({\r\n        type: \"GAMECONFIG:SET_MY_WOUNDED_CELL\",\r\n        payload: cell\r\n    }),\r\n\r\n    setMyMissedCell: cell => ({\r\n        type: \"GAMECONFIG:SET_MY_MISSED_CELL\",\r\n        payload: cell\r\n    }),\r\n\r\n    setMyKilledCells: cells => ({\r\n        type: \"GAMECONFIG:SET_MY_KILL_CELL\",\r\n        payload: cells\r\n    }),\r\n\r\n    setCanShoot: isCanShoot => ({\r\n        type: \"GAMECONFIG:SET_CAN_SHOOT\",\r\n        payload: isCanShoot\r\n    }),\r\n\r\n\r\n}\r\nexport default actions;","import io from 'socket.io-client';\r\n//socket.emit('join', currentUserId.toString());\r\nconst socket = io(\"http://\" + window.location.hostname + \":9009\");\r\nexport  default socket;","import React, {useEffect} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {ConfigBattlefield as ConfigBattlefieldBase} from '../components';\r\nimport {gameConfigActions} from '../redux/actions';\r\nimport socket from \"../socket\";\r\n\r\nconst ConfigBattlefield = ({cells, currentShipSize, setShip, canAddShip, fetchGetCells, fetchGameInfo, userReady, userId}) => {\r\n    useEffect(() => {\r\n        if (cells.length === 0) {\r\n            fetchGetCells();\r\n        }\r\n        socket.on('SERVER:SET_CONFIG', () => {\r\n            fetchGameInfo();\r\n        });\r\n    }, []);\r\n    return (\r\n        <ConfigBattlefieldBase items={cells} currentShipSize={currentShipSize} addShip={setShip}\r\n                               canAddShip={canAddShip && !userReady}/>\r\n    )\r\n};\r\nexport default connect(({gameConfigs}) => (\r\n    {\r\n        ...gameConfigs\r\n    }\r\n), gameConfigActions)(ConfigBattlefield);\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {ShipSelector as ShipSelectorBase} from '../components';\r\nimport {gameConfigActions} from '../redux/actions';\r\n\r\nconst ShipSelector = ({selectrors, currentShipSize, set–°urrentSize, userReady}) => {\r\n    return (\r\n        <ShipSelectorBase currentSelector={currentShipSize}\r\n                          selectrors={selectrors}\r\n                          onSelectSelected={set–°urrentSize}\r\n                          visible={!userReady}/>\r\n    )\r\n};\r\nexport default connect(({gameConfigs}) =>\r\n    ({\r\n        ...gameConfigs\r\n    }), gameConfigActions)(ShipSelector);\r\n","import React, {useState, useEffect} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {gameConfigActions} from '../redux/actions';\r\nimport {SmileTwoTone} from \"@ant-design/icons\";\r\nimport {Spin} from \"antd\";\r\n\r\nconst antIcon = <SmileTwoTone style={{fontSize: 200}} spin/>;\r\n\r\nconst ReadyButton = ({readyToBattle, cells, fetchSetCells, userReady}) => {\r\n    useEffect(() => {\r\n        setIsReady(userReady);\r\n    }, [userReady]);\r\n\r\n    const onReady = () => {\r\n        setIsReady(true);\r\n        fetchSetCells({cells: cells});\r\n    }\r\n    const [isReady, setIsReady] = useState(false);\r\n    if (readyToBattle && !isReady) {\r\n        return (\r\n            <div className=\"ready-button\" onClick={onReady}>\r\n                <h1>READY</h1>\r\n            </div>\r\n        )\r\n    } else if (isReady) {\r\n        return (\r\n            <Spin indicator={antIcon}/>\r\n        )\r\n    } else {\r\n        return (\r\n            <div/>\r\n        )\r\n    }\r\n};\r\nexport default connect(({gameConfigs}) =>\r\n    ({\r\n        ...gameConfigs\r\n    }), gameConfigActions)(ReadyButton);\r\n","import React, {useEffect} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Battlefield} from '../components';\r\nimport {gameConfigActions} from '../redux/actions';\r\n\r\nconst UserBattlefield = ({cells, fetchGetCells}) => {\r\n    useEffect(() => {\r\n        if (cells.length === 0) {\r\n            fetchGetCells();\r\n        }\r\n    }, [cells]);\r\n    return (\r\n        <Battlefield size={520} cells={cells}/>\r\n    )\r\n};\r\nexport default connect(({gameConfigs}) => (\r\n    {\r\n        ...gameConfigs\r\n    }\r\n), gameConfigActions)(UserBattlefield);\r\n","import React, {useEffect, useState} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Battlefield} from '../components';\r\nimport {gameConfigActions} from '../redux/actions';\r\n\r\nconst EnemyBattlefield = ({\r\n                              enemyCells,\r\n                              fetchGetEnemyCells,\r\n                              fetchShoot,\r\n                              canShoot,\r\n                              setWoundedCell,\r\n                              setMissedCell,\r\n                              setKilledCells,\r\n                              setCanShoot\r\n                          }) => {\r\n    const [cells, setSells] = useState('');\r\n    useEffect(() => {\r\n        if (enemyCells.length === 0) {\r\n            fetchGetEnemyCells();\r\n        } else {\r\n            setSells(enemyCells);\r\n        }\r\n    }, [enemyCells]);\r\n\r\n    const onMouseOverHandler = (e) => {\r\n        if (e.target.classList.contains(\"cell\") && canShoot) {\r\n            let x = e.target.dataset.x;\r\n            let y = e.target.dataset.y;\r\n            if (e.type === 'mouseover') {\r\n                showShip(x, y, true);\r\n            }\r\n\r\n            if (e.type === 'mouseout') {\r\n                showShip(x, y, false);\r\n            }\r\n        }\r\n    }\r\n\r\n    const showShip = (x, y, show) => {\r\n        let ship = getShip(x, y);\r\n        let newCells = [...enemyCells];\r\n\r\n        if (ship.length === 1) {\r\n            ship.forEach((item) => {\r\n                newCells[newCells.indexOf(item)].isShootSelected = show;\r\n            });\r\n        }\r\n        setSells(newCells);\r\n    }\r\n\r\n    const getShip = (x, y) => {\r\n        let ship = [];\r\n        let cell = cells.filter((item) => {\r\n            return item.y === +y && item.x === +x && !item.isKilled && !item.isWounded && !item.isAroundZone;\r\n        });\r\n        if (cell.length) {\r\n            ship.push(cell[0]);\r\n        }\r\n        return ship;\r\n    }\r\n\r\n    const onCellClick = (e) => {\r\n        if (e.target.classList.contains(\"cell\") && canShoot) {\r\n            const x = e.target.dataset.x;\r\n            const y = e.target.dataset.y;\r\n            const ship = getShip(x, y);\r\n            if (ship.length === 1) {\r\n                fetchShoot({cellId: ship[0]._id}).then(({status, cell, cells}) => {\r\n                    switch (status) {\r\n                        case \"wounded\":\r\n                            setWoundedCell(cell);\r\n                            break;\r\n                        case \"missed\":\r\n                            setMissedCell(cell);\r\n                            setCanShoot(false);\r\n                            break;\r\n                        case \"killed\":\r\n                            setKilledCells(cells);\r\n                            break;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    const getShipAround = (ship) => {\r\n        const shipAroundZone = [];\r\n\r\n        function setAround(cell) {\r\n            if (cell.length) {\r\n                shipAroundZone.push(cell[0]);\r\n            }\r\n        }\r\n\r\n        ship.forEach(shipCell => {\r\n            setAround(cells.filter((item) => {\r\n                return item.x === shipCell.x - 1 && item.y === shipCell.y && !item.isAroundZone && !item.isShootSelected;\r\n            }));\r\n            setAround(cells.filter((item) => {\r\n                return item.x === shipCell.x + 1 && item.y === shipCell.y && !item.isAroundZone && !item.isShootSelected;\r\n            }));\r\n            setAround(cells.filter((item) => {\r\n                return item.x === shipCell.x && item.y === shipCell.y - 1 && !item.isAroundZone && !item.isShootSelected;\r\n            }));\r\n            setAround(cells.filter((item) => {\r\n                return item.x === shipCell.x && item.y === shipCell.y + 1 && !item.isAroundZone && !item.isShootSelected;\r\n            }));\r\n\r\n            setAround(cells.filter((item) => {\r\n                return item.x === shipCell.x - 1 && item.y === shipCell.y - 1 && !item.isAroundZone && !item.isShootSelected;\r\n            }));\r\n            setAround(cells.filter((item) => {\r\n                return item.x === shipCell.x + 1 && item.y === shipCell.y + 1 && !item.isAroundZone && !item.isShootSelected;\r\n            }));\r\n            setAround(cells.filter((item) => {\r\n                return item.x === shipCell.x + 1 && item.y === shipCell.y - 1 && !item.isAroundZone && !item.isShootSelected;\r\n            }));\r\n            setAround(cells.filter((item) => {\r\n                return item.x === shipCell.x - 1 && item.y === shipCell.y + 1 && !item.isAroundZone && !item.isShootSelected;\r\n            }));\r\n\r\n        });\r\n        return shipAroundZone;\r\n    }\r\n\r\n    return (\r\n        <Battlefield size={520} cells={cells}\r\n                     onMouseOverHandler={onMouseOverHandler}\r\n                     onCellClick={onCellClick}\r\n        />\r\n    )\r\n};\r\nexport default connect(({gameConfigs}) => (\r\n    {\r\n        ...gameConfigs\r\n    }\r\n), gameConfigActions)(EnemyBattlefield);\r\n","import React, {useEffect} from 'react';\r\nimport classNames from 'classnames';\r\nimport {connect} from 'react-redux';\r\nimport {gameConfigActions} from '../redux/actions';\r\nimport socket from \"../socket\";\r\n\r\nconst BattlefieldMiddleZone = ({canShoot, userId, setMyKilledCells, setMyWoundedCell, setMyMissedCell, setCanShoot}) => {\r\n\r\n    useEffect(() => {\r\n        socket.on('SERVER:KILLED', (data) => {\r\n            if (data) {\r\n                const shootData = JSON.parse(data);\r\n                if (shootData.shootUser !== userId) {\r\n                    setMyKilledCells(shootData.cells);\r\n                }\r\n            }\r\n        });\r\n        socket.on('SERVER:WOUNDED', (data) => {\r\n            if (data) {\r\n                const shootData = JSON.parse(data);\r\n                if (shootData.shootUser !== userId) {\r\n                    setMyWoundedCell(shootData.cell);\r\n                }\r\n            }\r\n        });\r\n        socket.on('SERVER:MISSED', (data) => {\r\n            if (data) {\r\n                const shootData = JSON.parse(data);\r\n                if (shootData.shootUser !== userId) {\r\n                    setMyMissedCell(shootData.cell);\r\n                    setCanShoot(true);\r\n                }\r\n            }\r\n        });\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <div className={classNames('middle-zone',\r\n            {'middle-zone__can_shoot': canShoot})}>{canShoot ? \"Let's shoot!\" : \"Wait...\"}</div>\r\n    )\r\n};\r\nexport default connect(({gameConfigs}) => (\r\n    {\r\n        ...gameConfigs\r\n    }\r\n), gameConfigActions)(BattlefieldMiddleZone);\r\n","import React from 'react';\r\nimport './GamePlatform.scss';\r\nimport { Steps } from 'antd';\r\nimport { ConfigBattlefield, ShipSelector, ReadyButton } from '../../containers';\r\n\r\nconst { Step } = Steps;\r\nconst GamePlatform = () => {\r\n    return (\r\n        <div className=\"platform\">\r\n            <div className=\"platform-middle\">\r\n                <ShipSelector />\r\n                <ConfigBattlefield />\r\n                <div className=\"platform-middle-right\">\r\n                    <Steps direction=\"vertical\" current={1}>\r\n                        <Step title=\"Friend join\" description=\"Friend join to the game.\" />\r\n                        <Step title=\"Fill battlefield\" description=\"Need set all ships and start the game.\" />\r\n                    </Steps>\r\n                    <ReadyButton />\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\nexport default GamePlatform;","import React, {useState, useEffect} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {NameField} from \"../../components\";\r\nimport socket from \"../../socket\";\r\nimport {gameConfigActions} from '../../redux/actions';\r\nimport './HomePage.scss';\r\n\r\nconst HomePage = ({fetchCreateGame, setGameData, joinToken, _id}) => {\r\n    const [nickName, setNickName] = useState('');\r\n    const startGame = () => {\r\n        fetchCreateGame({\"userName\": nickName});\r\n    }\r\n\r\n    useEffect(() => {\r\n        socket.on('SERVER:USER_JOINED', (gameObj) => {\r\n            if (gameObj) {\r\n                const data = JSON.parse(gameObj);\r\n                setGameData(data);\r\n            }\r\n        });\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <NameField enterClick={startGame} joinToken={joinToken} nickName={nickName} setNickName={setNickName} />\r\n    );\r\n};\r\nexport default connect(({gameConfigs}) => ({...gameConfigs}), gameConfigActions)(HomePage);","import React from 'react';\r\nimport {UserBattlefield, EnemyBattlefield, BattlefieldMiddleZone} from '../../containers';\r\nimport './BattleFieldPlatform.scss';\r\n\r\nconst BattleFieldPlatform = () => {\r\n    const items = [];\r\n    for (let i = 0; i < 10; i++) {\r\n        for (let j = 0; j < 10; j++) {\r\n            items.push({\r\n                _id: j + \" \" + i,\r\n                x: j,\r\n                y: i\r\n            });\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"b-platform\">\r\n            <div className=\"b-platform__battlefield\">\r\n                <UserBattlefield/>\r\n            </div>\r\n            <div className=\"b-platform__middle-zone\">\r\n                <BattlefieldMiddleZone />\r\n            </div>\r\n            <div className=\"b-platform__battlefield\">\r\n                <EnemyBattlefield/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default BattleFieldPlatform;","import React, {useEffect, useState} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {gameConfigActions} from \"../../redux/actions\";\r\nimport {NameField} from \"../../components\";\r\n\r\nconst VerifyPage = ({history, _id, fetchJoinGame, fetchGameInfo}) => {\r\n    const [nickName, setNickName] = useState('');\r\n    useEffect(() => {\r\n        if (_id) {\r\n            history.push('/');\r\n        }\r\n    }, [_id]);\r\n    const joinToGame = () => {\r\n        const joinToken = window.location.pathname.split('join/')[1];\r\n        fetchJoinGame({\r\n            userB: nickName,\r\n            joinToken: joinToken\r\n        }).then(({status}) => {\r\n            if (status === \"success\") {\r\n                fetchGameInfo();\r\n            }\r\n        })\r\n    }\r\n    return (\r\n        <NameField setNickName={setNickName} nickName={nickName} enterClick={joinToGame}/>\r\n    );\r\n};\r\nexport default connect(({gameConfigs}) => ({...gameConfigs}), gameConfigActions)(VerifyPage);","import React, {useEffect} from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport './App.scss';\r\nimport {GamePlatform, HomePage, JoinPage, BattleFieldPlatform} from './pages'\r\nimport {connect} from \"react-redux\";\r\nimport {gameConfigActions} from \"./redux/actions\";\r\nimport socket from \"./socket\";\r\nimport {\r\n    Switch,\r\n    Route,\r\n} from \"react-router-dom\";\r\n\r\nconst statusSwitch = (props) => {\r\n    switch (props.gameStatus) {\r\n        case 'home':\r\n            return <HomePage {...props}/>;\r\n        case 'config':\r\n            return <GamePlatform {...props}/>;\r\n        case 'game':\r\n            return  <BattleFieldPlatform {...props}/>\r\n        default:\r\n            return <div/>;\r\n    }\r\n}\r\n\r\nconst MainRouteComponent = (props) => {\r\n    return (\r\n        <>\r\n            {statusSwitch(props)}\r\n        </>\r\n    )\r\n}\r\n\r\nfunction App({status, _id, fetchGameInfo, setGameStatus}) {\r\n    useEffect(() => {\r\n        if(_id) {\r\n            socket.emit('join', _id);\r\n        }\r\n    }, [_id]);\r\n\r\n    useEffect(() => {\r\n        if (_id) {\r\n            fetchGameInfo();\r\n        } else if (status !== \"home\") {\r\n            setGameStatus(\"home\");\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <div className=\"header-logo\">\r\n                SEA battle\r\n            </div>\r\n            <Switch>\r\n                <Route\r\n                    path={[\"/join\"]}\r\n                    component={JoinPage}\r\n                />\r\n                <Route\r\n                    path=\"/\"\r\n                    render={(props) => (<MainRouteComponent gameStatus={status} {...props}/>)}\r\n                />\r\n            </Switch>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(({gameConfigs}) =>\r\n    ({\r\n        ...gameConfigs\r\n    }), gameConfigActions)(App);","const items = [];\r\nfor (let i = 0; i < 10; i++) {\r\n    for (let j = 0; j < 10; j++) {\r\n        items.push({\r\n            _id: j + \" \" + i,\r\n            x: j,\r\n            y: i\r\n        });\r\n    }\r\n}\r\n\r\nconst initialState = {\r\n    cells: []\r\n};\r\n\r\nexport default (state = initialState, {type, payload}) => {\r\n    switch (type) {\r\n        // case \"BATTLEFIELD:SET_CELLS\":\r\n        //     return {\r\n        //         ...state,\r\n        //         cells: payload\r\n        //     };\r\n        default:\r\n            return state;\r\n    }\r\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {\r\n    _id: window.localStorage.gameId,\r\n    userId: window.localStorage.userId,\r\n    cells: [],\r\n    enemyCells: [],\r\n    status: \"\",\r\n    currentShipSize: 1,\r\n    canAddShip: true,\r\n    readyToBattle: false,\r\n    canShoot: false,\r\n    selectrors: [\r\n        {\r\n            \"name\": \"one\",\r\n            \"size\": 1,\r\n            \"count\": 4\r\n        },\r\n        {\r\n            \"name\": \"two\",\r\n            \"size\": 2,\r\n            \"count\": 3\r\n        },\r\n        {\r\n            \"name\": \"three\",\r\n            \"size\": 3,\r\n            \"count\": 2\r\n        },\r\n        {\r\n            \"name\": \"four\",\r\n            \"size\": 4,\r\n            \"count\": 1\r\n        }\r\n    ],\r\n    readyUsers: []\r\n};\r\n\r\nconst sortFunction = function (a, b) {\r\n    let aSize = a.y;\r\n    let bSize = b.y;\r\n    let aLow = a.x;\r\n    let bLow = b.x;\r\n    if (aSize === bSize) {\r\n        return (aLow < bLow) ? -1 : (aLow > bLow) ? 1 : 0;\r\n    } else {\r\n        return (aSize < bSize) ? -1 : 1;\r\n    }\r\n};\r\n\r\nexport default (state = initialState, {type, payload}) => {\r\n    switch (type) {\r\n        case \"GAMECONFIG:SET_CURRENT_SIZE\":\r\n            return {\r\n                ...state,\r\n                currentShipSize: payload,\r\n                canAddShip: state.selectrors.filter(\r\n                    item => {\r\n                        return item.size === payload;\r\n                    }\r\n                )[0].count > 0\r\n            };\r\n        case \"GAMECONFIG:SET_SHIP\":\r\n            return {\r\n                ...state,\r\n                selectrors: state.selectrors.map(\r\n                    item => item.size === state.currentShipSize ? {...item, count: item.count - 1} : item\r\n                ),\r\n                canAddShip: state.selectrors.filter(\r\n                    item => {\r\n                        return item.size === state.currentShipSize;\r\n                    }\r\n                )[0].count - 1 > 0\r\n            }\r\n        case \"GAMECONFIG:READY_CHECK\":\r\n            return {\r\n                ...state,\r\n                readyToBattle: state.selectrors.filter(\r\n                    item => {\r\n                        return item.count !== 0\r\n                    }\r\n                ).length === 0\r\n            }\r\n        case \"GAMECONFIG:SET_GAME_DATA\":\r\n            return {\r\n                ...state,\r\n                ...payload,\r\n                userReady: payload?.readyUsers.indexOf(window.localStorage.getItem(\"userId\")) !== -1,\r\n                canShoot: payload?.currentRoundUser === window.localStorage.getItem(\"userId\")\r\n            }\r\n        case \"GAMECONFIG:SET_GAME_STATUS\":\r\n            return {\r\n                ...state,\r\n                status: payload\r\n            }\r\n        case \"GAMECONFIG:SET_CELLS\":\r\n            return {\r\n                ...state,\r\n                cells: payload\r\n            };\r\n        case \"GAMECONFIG:SET_USER_READY\":\r\n            return {\r\n                ...state,\r\n                userReady: payload\r\n            };\r\n        case \"GAMECONFIG:SET_ENEMY_CELLS\":\r\n            return {\r\n                ...state,\r\n                enemyCells: payload\r\n            };\r\n        case \"GAMECONFIG:SET_WOUNDED_CELL\":\r\n            return {\r\n                ...state,\r\n                enemyCells: state.enemyCells.map(\r\n                    item => item._id === payload._id ? payload : item\r\n                )\r\n            }\r\n        case \"GAMECONFIG:SET_MY_WOUNDED_CELL\":\r\n            return {\r\n                ...state,\r\n                cells: state.cells.map(\r\n                    item => item._id === payload._id ? payload : item\r\n                )\r\n            };\r\n        case \"GAMECONFIG:SET_MISSED_CELL\":\r\n            return {\r\n                ...state,\r\n                enemyCells: state.enemyCells.map(\r\n                    item => item._id === payload._id ? payload : item\r\n                )\r\n            };\r\n        case \"GAMECONFIG:SET_MY_MISSED_CELL\":\r\n            return {\r\n                ...state,\r\n                cells: state.cells.map(\r\n                    item => item._id === payload._id ? payload : item\r\n                )\r\n            };\r\n        case \"GAMECONFIG:SET_KILL_CELL\":\r\n            const oldCells = state.enemyCells.filter((item) => !payload.some(killedCell => killedCell._id === item._id));\r\n            return {\r\n                ...state,\r\n                enemyCells: oldCells.concat(payload).sort(sortFunction)\r\n            };\r\n        case \"GAMECONFIG:SET_MY_KILL_CELL\":\r\n            const oldMyCells = state.cells.filter((item) => !payload.some(killedCell => killedCell._id === item._id));\r\n            return {\r\n                ...state,\r\n                cells: oldMyCells.concat(payload).sort(sortFunction)\r\n            };\r\n        case \"GAMECONFIG:SET_CAN_SHOOT\":\r\n            return {\r\n                ...state,\r\n                canShoot: payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};","import { combineReducers } from 'redux'\r\n\r\nimport battlefield from './battlefield'\r\nimport gameConfigs from './gameConfig'\r\n\r\nexport default combineReducers({\r\n    battlefield,\r\n    gameConfigs\r\n});","  \r\nimport {applyMiddleware, createStore, compose} from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport rootReducer from './reducers';\r\n\r\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {BrowserRouter as Router} from \"react-router-dom\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Router>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </Router>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}